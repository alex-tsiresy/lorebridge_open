services:
  # Web application service (from server/)
  web:
    container_name: lorebridge-web
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file:
      - ./server/.env
    environment:
      - PYTHON_TRANSCRIPT_SERVICE_URL=http://transcript-service:5001
      - OTEL_SERVICE_NAME=fastapi-backend
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=otel-collector:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_RESOURCE_ATTRIBUTES=service.version=0.1.0,service.namespace=demo
    ports:
      - "8000:8000"
    volumes:
      - ./server/app:/app/app
      - ./server/uploads:/app/uploads
    command: >
      sh -c "uv run alembic --config alembic.ini upgrade head && uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    depends_on:
      db:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      lorebridge-network:
        aliases:
          - app
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "logging=promtail"

  # Database service (from server/)
  db:
    container_name: lorebridge-db
    image: postgres:15-alpine
    attach: false
    restart: always
    env_file:
      - ./server/.env
   
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - lorebridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PgAdmin service (from server/)
  pgadmin:
    container_name: lorebridge-pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - db
    networks:
      - lorebridge-network

  # Ngrok service (from server/)
  ngrok:
    image: ngrok/ngrok:latest
    depends_on:
      - web
    environment:
      - NGROK_AUTHTOKEN=2zcu1x7MXuMmSBjwuI0SkIi24K1_4uzMuUQPN5koq5NExJtWp
    command: http web:8000
    ports:
      - "4040:4040"
    networks:
      - lorebridge-network

  # Transcript service (from python-transcript-service/)
  transcript-service:
    container_name: lorebridge-transcript-service
    build:
      context: ./python-transcript-service
      dockerfile: Dockerfile
    env_file:
      - ./python-transcript-service/.env
    ports:
      - "5001:5001"
    environment:
      - PORT=5001
    networks:
      - lorebridge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.103.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./server/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - lorebridge-network

  # Jaeger for tracing UI
  jaeger:
    image: jaegertracing/all-in-one:1.58
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # UI
      - "14250:14250"
      - "14268:14268"
      - "6831:6831/udp"
    networks:
      - lorebridge-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.54.1
    volumes:
      - ./server/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - lorebridge-network

  # Loki for logs
  loki:
    image: grafana/loki:2.9.8
    command: ["-config.file=/etc/loki/local-config.yml"]
    volumes:
      - ./server/loki-config.yml:/etc/loki/local-config.yml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - lorebridge-network

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:2.9.8
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./server/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    networks:
      - lorebridge-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:11.1.0
    volumes:
      - ./server/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3030:3000"
    depends_on:
      - prometheus
      - loki
      - jaeger
    networks:
      - lorebridge-network

networks:
  lorebridge-network:
    driver: bridge

volumes:
  db_data: 
  loki-data: